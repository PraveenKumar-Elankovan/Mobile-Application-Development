Designing and coding two Android applications. 

Audio Server:

•	The first application stores a number of audio clips, such as songs or other recordings. 
•	The clips are numbered 1 through n, where n is the total number of clips. 
•	The application contains a service intended to be bound (as opposed to started), which exposes an API for clients to use. 
•	The API supports such functionality as playing one of the audio clips, pausing the clip, resuming the clip and stopping the playing of the clip altogether. 
•	In addition, this application maintains an SQLite database that keeps track of all the requests that were received by the AudioServer application.
•	For each request, the database records the date and time (including seconds) when the request was issued, the kind of request the number of the clip (if applicable) and the current state of the service when the request was received. 
•	Additional functionality exposed by the AudioServer API allows a client application to query the database for all transactions that were recorded thus far in the database. 
•	The service broadcasts an implicit intent when a clip finishes playing. 

Player Client:

•	The second application consists of an activity that exposes functionality for using the AudioServer and binds to the service for playing desired audio clips. 
•	The interface includes appropriate View elements for the following functionality: 
1.	Playing a given clip (by number) 
2.	Pausing the playback
3.	Resuming the playback
4.	Stopping the player
5.	Getting a record of all AudioServer transactions (i.e., requests) recorded so far. 
•	The transactions are shown in a second activity that contains a ListView. 
•	When the client activity is stopped, the service continues playing.
•	The service is unbound and stopped if the activity is destroyed. 
•	Finally, when a broadcast is sent indicating that an audio clip has finished playing, the application displays an appropriate toast message on the device’s screen.
